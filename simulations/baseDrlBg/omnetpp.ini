[General]
image-path=../../../images

allow-object-stealing-on-deletion = true

cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 60s
cmdenv-interactive = true
cmdenv-redirect-output = true
cmdenv-output-file = ${runnumber}-CMDENV_LOG.txt

**.vector-recording = false
**.scalar-recording = false
record-eventlog = false
**.sctp.**.scalar-recording = false
**.sctp.**.vector-recording = false
**.routingRecorder.enabled = false

**.ppp[*].**.statistic-recording = false
**.sctp.**.statistic-recording = false
**.sctp.statistic-recording = false
**.ppp.**.statistic-recording = false
**.pppIf.**.statistic-recording = false
**.pppInterface.**.statistic-recording = false
**.x2App[*].**.statistic-recording = false
**.x2ppp[*].**.statistic-recording = false
**.networkLayer.**.statistic-recording = false
**.lo0.**.statistic-recording = false
**.am.**.statistic-recording = false
**.am.statistic-recording = false
**.client.**.statistic-recording = false
**.lteNic.sdap.**.statistic-recording = false
**.upf.**.statistic-recording = false
**.ppp*.**.statistic-recording = false
**.router.**.statistic-recording = false

# change basic names of omnet++ output because of crashes due to very long filenames
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
eventlog-file = ${resultdir}/${configname}-${runnumber}.elog # despite being disabled it tries to delete it on start...
snapshot-file = ${resultdir}/${configname}-${runnumber}.sna

# change this through a command line to run N episodes with N different seeds, otherwise the same simulation is reproduced over and over
repeat = 1000

simtime-resolution = ps
sim-time-limit = 1200s # 20 minutes

network = gymir5g.simulations.baseDrlBg.DrlBaseNetworkBg

# default playground
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinX = 20m
**.mobility.constraintAreaMinY = 20m
**.mobility.constraintAreaMinZ = 0m
**.mobility.initFromDisplayString = false

# network config
*.configurator.config = xmldoc("demo.xml")

# visualization
*.visualizer.mobilityVisualizer.displayMobility = true
*.visualizer.mobilityVisualizer.displayPositions = true
*.visualizer.mobilityVisualizer.displayOrientations = true
*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true
*.visualizer.mobilityVisualizer.trailLength = 300
*.visualizer.mobilityVisualizer.moduleFilter = "**.ship*.mobility"

[Config Base]
extends = General

# channel configuration
**.scenario = "URBAN_MACROCELL"
**.dynamic_los = true
**.amcType = "NRAmc"
**.pilotMode = "AVG_CQI" 
**.targetBler = 0.01
**.blerShift = 5
**.fbPeriod = 100

# transmission power
**.ueTxPower = 26
**.eNodeBTxPower = 46

# enable interference
**.downlink_interference = false  # there are no real cells, so this can be disabled 
**.uplink_interference = false    # there are no real cells, so this can be disabled
**.bgCell_interference = true     # enable UL/DL interference from bg cells

# handover general settings
**.enableHandover = true
*.gNodeB*.cellularNic.phy.handoverLatency = 50ms
*.gNodeB*.cellInfo.broadcastMessageInterval = 1.2s
**.sctp.nagleEnabled = false
**.sctp.enableHeartbeats = false

# carrier components: numBands = RBs number, numerology index: 0...5, etc.
# channel Bandwidth in MHz = (num bands/5) * 2^numerology index with 10% of the bandwidth reserved for guard bands
# one RB occupies 180KHz (with 4G and 5G with numerology index 0)
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${rbs=100}
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=2}

*.gNodeB*.cellularNic.numCarriers = 1
*.gNodeB*.cellularNic.channelModel[0].componentCarrierIndex = 0

*.ship.cellularNic.numNRCarriers = 1
*.ship.cellularNic.nrChannelModel[0].componentCarrierIndex = 0

######################################################################################################
# ship-to-gnb connection                                                                             #
######################################################################################################
# since dynamic association is turned on, they will be reassigned to the best-SINR gNBs at the initialization,
# but still they need to have first inner association, so they are assigned by default to the first LTE and NR indexes
**.dynamicCellAssociation = true

*.ship.macCellId = 0
*.ship.masterId = 0
*.ship.nrMacCellId = 1
*.ship.nrMasterId = 1

**.tolerateMaxDistViolation = true # prevent exception from being > 1000m away from gNB

######################################################################################################
# gNodeBs config                                                                                     #
######################################################################################################
*.*NodeB*.mobility.initFromDisplayString = false

*.gNodeB1.mobility.initialX = ${gNodeB1initX=200m}
*.gNodeB1.mobility.initialY = ${gNodeB1initY=300m}

*.gNodeB2.mobility.initialX = ${gNodeB2initX=700m}
*.gNodeB2.mobility.initialY = ${gNodeB2initY=300m}

# X2 settings
*.gNodeB*.numX2Apps = 1
*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1)
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0"
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0"

######################################################################################################
# target ship (UE) mobility config                                                                   #
######################################################################################################
*.ship.mobility.typename = "RandomWaypointMobility"
*.ship.mobility.initFromDisplayString = false
*.ship.mobility.constraintAreaMaxX = 980m
*.ship.mobility.constraintAreaMaxY = 980m
*.ship.mobility.constraintAreaMinX = 20m
*.ship.mobility.constraintAreaMinY = 20m
*.ship.mobility.waitTime = 0.5s
*.ship.mobility.speed = uniform(2mps, 15mps)

######################################################################################################
# Apps config                                                                                        #
######################################################################################################
# In the current version, the Ip2Nic module of the master eNB (the UE) selects which path
# to follow based on the Type of Service (TOS) field:
# - use master eNB if tos < 10
# - use secondary gNB if 10 <= tos < 20
# - use split bearer if tos >= 20
**.tos = 10

## target ship and shore apps
*.ship.numApps = 1
*.ship.app[0].typename = "gymir5g.apps.ship.ShipApp"
*.ship.app[0].localPortData = 3088
*.ship.app[0].destAddress = "shore"
*.ship.app[0].destPort = 3000
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc.json"
*.ship.app[0].isSendingSimultaneously = true
*.ship.app[0].isUsingFutureData = true

*.shore.numApps = 1
*.shore.app[0].typename = "gymir5g.apps.shore.ShoreApp"
*.shore.app[0].localPortData = 3000
*.shore.app[0].destAddress = "ship"
*.shore.app[0].destPort = 3088
*.shore.app[0].isDecode = true
*.shore.app[0].verbose = 0

[Config Mixed]
extends = Base

######################################################################################################
# BG traffic                                                                                         #
######################################################################################################
# add 3 BgCells in a symmetric way
*.numBgCells = 3

# Num BG UEs for gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs=20}

# Num BG UEs for BgCells
*.bgCell[*].bgTrafficGenerator.numBgUes = ${numBgUEs} + 10

# put our agent in y; 500, 600
*.ship.mobility.constraintAreaMinX = 20m
*.ship.mobility.constraintAreaMaxX = 980m
*.ship.mobility.constraintAreaMinY = 20m #!
*.ship.mobility.constraintAreaMaxY = 600m #!

*.bgCell[*].bgScheduler.isNr = true
*.bgCell[*].bgScheduler.txPower = 46
*.bgCell[*].bgScheduler.numBands = ${rbs}
*.bgCell[*].bgScheduler.numerologyIndex = ${u}

# position of the background gNodeBs
*.bgCell[0].mobility.initialX = 450m 
*.bgCell[0].mobility.initialY = 400m
*.bgCell[1].mobility.initialX = 100m 
*.bgCell[1].mobility.initialY = 500m
*.bgCell[2].mobility.initialX = 800m 
*.bgCell[2].mobility.initialY = 100m
 
# mobility of background UEs
*.bgCell[*].bgTrafficGenerator.bgUE[*].mobility.typename = "RandomWaypointMobility"
*.bgCell[*].bgTrafficGenerator.bgUE[*].mobility.speed = uniform(2mps, 7mps)

*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(350m,550m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(300m,500m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(50m,200m) 
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(400m,600m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(600m,800m) 
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(50m,200m)

# background traffic in the background cells  
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeUl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = intuniform(750B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeUl = intuniform(700B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = 10ms
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodUl = 10ms

# background traffic in gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = intuniform(700B,1000B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = intuniform(700B,1000B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 20ms
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = 20ms

[Config Moderate]
extends = Base

######################################################################################################
# BG traffic                                                                                         #
######################################################################################################
# add 3 BgCells in a symmetric way
*.numBgCells = 3

# Num BG UEs for gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs=20}

# Num BG UEs for BgCells
*.bgCell[*].bgTrafficGenerator.numBgUes = ${numBgUEs} + 10

# put our agent in y; 500, 600
*.ship.mobility.constraintAreaMinX = 20m
*.ship.mobility.constraintAreaMaxX = 980m
*.ship.mobility.constraintAreaMinY = 500m #!
*.ship.mobility.constraintAreaMaxY = 600m #!

*.bgCell[*].bgScheduler.isNr = true
*.bgCell[*].bgScheduler.txPower = 46
*.bgCell[*].bgScheduler.numBands = ${rbs}
*.bgCell[*].bgScheduler.numerologyIndex = ${u}

# position of the background gNodeBs
*.bgCell[0].mobility.initialX = 450m 
*.bgCell[0].mobility.initialY = 400m
*.bgCell[1].mobility.initialX = 100m 
*.bgCell[1].mobility.initialY = 500m
*.bgCell[2].mobility.initialX = 800m 
*.bgCell[2].mobility.initialY = 100m
 
# mobility of background UEs
*.bgCell[*].bgTrafficGenerator.bgUE[*].mobility.typename = "RandomWaypointMobility"
*.bgCell[*].bgTrafficGenerator.bgUE[*].mobility.speed = uniform(2mps, 7mps)

*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(350m,550m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(300m,500m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(50m,200m) 
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(400m,600m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(600m,800m) 
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(50m,200m)

# background traffic in the background cells  
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeUl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = intuniform(750B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeUl = intuniform(700B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = 10ms
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodUl = 10ms

# background traffic in gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = intuniform(750B,1000B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = intuniform(750B,1000B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 10ms
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = 10ms

[Config Easy]
extends = Base
# no bg cells almost free base stations
*.numBgCells = 0

# Num BG UEs for gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs=30}

# put our agent in y; 0, 500
*.ship.mobility.constraintAreaMinX = 20m
*.ship.mobility.constraintAreaMaxX = 980m
*.ship.mobility.constraintAreaMinY = 20m #!
*.ship.mobility.constraintAreaMaxY = 500m #!

# background traffic in gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = intuniform(200B,500B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = intuniform(200B,500B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 10ms
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = 10ms

[Config Hard]
extends = Base
# hardcore congestion 

# Num BG UEs for gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].numBgUes = ${numManyBgUEs=intuniform(30, 50)}

# Num BG UEs for BgCells
*.bgCell[*].bgTrafficGenerator.numBgUes = ${numManyBgUEs} + intuniform(20, 30)

# put our agent in y; 700, 1000
*.ship.mobility.constraintAreaMinX = 20m
*.ship.mobility.constraintAreaMaxX = 980m
*.ship.mobility.constraintAreaMinY = 700m #!
*.ship.mobility.constraintAreaMaxY = 1000m #!

# background traffic in the background cells  
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeUl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = intuniform(750B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeUl = intuniform(700B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = 10ms
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodUl = 10ms

# background traffic in gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = intuniform(500B,700B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = intuniform(500B,700B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 20ms
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = 20ms

[Config Same]
extends = Base
######################################################################################################
# BG traffic                                                                                         #
######################################################################################################
# add 3 BgCells in a symmetric way
*.numBgCells = 3

# Num BG UEs for gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs=20}

# Num BG UEs for BgCells
*.bgCell[*].bgTrafficGenerator.numBgUes = ${numBgUEs}

# put our agent in y; 500, 600
*.ship.mobility.typename = "LinearMobility"
*.ship.mobility.constraintAreaMinX = 20m
*.ship.mobility.constraintAreaMaxX = 980m
*.ship.mobility.constraintAreaMinY = 500m #!
*.ship.mobility.constraintAreaMaxY = 600m #!
*.ship.mobility.initFromDisplayString = false
*.ship.mobility.speed = uniform(2mps, 15mps)

*.bgCell[*].bgScheduler.isNr = true
*.bgCell[*].bgScheduler.txPower = 46
*.bgCell[*].bgScheduler.numBands = ${rbs}
*.bgCell[*].bgScheduler.numerologyIndex = ${u}

# position of the background gNodeBs
*.bgCell[0].mobility.initialX = 450m 
*.bgCell[0].mobility.initialY = 400m
*.bgCell[1].mobility.initialX = 100m 
*.bgCell[1].mobility.initialY = 500m
*.bgCell[2].mobility.initialX = 800m 
*.bgCell[2].mobility.initialY = 100m
 
# mobility of background UEs
**.bgUE[*].mobility.typename = "LinearMobility"
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(350m,550m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(300m,500m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(50m,200m) 
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(400m,600m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(600m,800m) 
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(50m,200m)

*.gNodeB1.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(${gNodeB1initX}-150m,${gNodeB1initX}+150m)
*.gNodeB1.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(${gNodeB1initY}-150m,${gNodeB1initY}+150m)
*.gNodeB2.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(${gNodeB2initX}-150m,${gNodeB2initX}+150m)
*.gNodeB2.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(${gNodeB2initY}-150m,${gNodeB2initY}+150m)

# background traffic in the background cells  
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeUl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = intuniform(500B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeUl = intuniform(250B,750B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = 10ms
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodUl = 10ms

# background traffic in gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = intuniform(500B,1000B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = intuniform(250B,750B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 10ms
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = 10ms

# add streams without random jumps
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc_same.json"

[Config TestRTC]
extends = Same
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc_same.json"
*.ship.app[0].adaptiveAlgorithm = "no"
*.ship.app[0].logdir = "null"
*.shore.app[0].verbose = 2
**.isFec = true
**.isNack = true
**.fecAfterPackets = 7
**.receiverReportPeriod = 1s

[Config TestRTCDRL]
extends = TestRTC
*.ship.app[0].adaptiveAlgorithm = "drl_base"

[Config TestRTCDirect]
# in fact, this scenario means that DRL is deployed at the receiver side only with direct action sending (idea case of no-lost feedback)
extends = TestRTC
*.shore.app[0].isDirectReceiverReport = true
*.shore.app[0].isDirectTransportFeedback = true

[Config TestUDP]
# no-RTC old-like scenario
extends = Same
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc_same.json"
*.ship.app[0].adaptiveAlgorithm = "no"
*.ship.app[0].logdir = "null"
*.shore.app[0].verbose = 2
**.isAck = true

########################################################
[Config SameRTCDirect]
extends = Same
*.ship.app[0].logdir = "null"
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc_same.json"
**.isFec = true
**.isNack = true
**.fecAfterPackets = 7
**.receiverReportPeriod = 1s
**.transportFeedbackPeriod = 0.1s
**.isDirectReceiverReport = true
**.isDirectTransportFeedback = true

[Config MixedRTCDirect]
extends = Mixed
*.ship.app[0].logdir = "null"
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc.json"
**.isFec = true
**.isNack = true
**.fecAfterPackets = 7
**.receiverReportPeriod = 1s
**.transportFeedbackPeriod = 0.1s
*.shore.app[0].isDirectReceiverReport = true
*.shore.app[0].isDirectTransportFeedback = true

[Config MixedRTCDirectNoFec]
extends = Mixed
*.ship.app[0].logdir = "null"
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc.json"
**.isFec = false
**.isNack = true
**.maxNackDelay = 0.1s
**.maxPlayoutDelay = 0.25s
**.receiverReportPeriod = 1s
**.transportFeedbackPeriod = 0.1s
*.shore.app[0].isDirectReceiverReport = true
*.shore.app[0].isDirectTransportFeedback = true

[Config MixedRTCDirectNoFec2Sec]
extends = MixedRTCDirectNoFec
**.receiverReportPeriod = 2s

[Config SameRTCDirectNoFec]
extends = Same
*.ship.app[0].logdir = "null"
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc_same.json"
**.isFec = false
**.isNack = true
**.maxNackDelay = 0.1s
**.maxPlayoutDelay = 0.25s
**.receiverReportPeriod = 1s
**.transportFeedbackPeriod = 0.1s
*.shore.app[0].isDirectReceiverReport = true
*.shore.app[0].isDirectTransportFeedback = true

[Config SameRTCDirectNoFec2Sec]
extends = SameRTCDirectNoFec
**.receiverReportPeriod = 2s

[Config HardRTCDirect]
extends = Hard
*.ship.app[0].logdir = "null"
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc.json"
**.isFec = true
**.isNack = true
**.fecAfterPackets = 7
**.receiverReportPeriod = 1s
**.transportFeedbackPeriod = 0.1s
*.shore.app[0].isDirectReceiverReport = true
*.shore.app[0].isDirectTransportFeedback = true

[Config HardRTCDirectNoFec]
extends = Hard
*.ship.app[0].logdir = "null"
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc.json"
**.isFec = false
**.isNack = true
**.maxNackDelay = 0.1s
**.maxPlayoutDelay = 0.25s
**.receiverReportPeriod = 1s
**.transportFeedbackPeriod = 0.1s
*.shore.app[0].isDirectReceiverReport = true
*.shore.app[0].isDirectTransportFeedback = true

[Config HardRTCDirectNoFec2Sec]
extends = HardRTCDirectNoFec
**.receiverReportPeriod = 2s

[Config CollectPhyData]
extends = Same
# example of how to use PHY data collecting
*.ship.app[0].adaptiveAlgorithm = "no"
# to add 5G PHY data collecting 
**.vector-recording = true
*.ship.cellularNic.NRPhyType = "gymir5g.omnet.stack.phy.NRPhyUeWithFeedback"
*.ship.cellularNic.NRChannelModelType = "gymir5g.omnet.stack.phy.channelModel.NRChannelModelWithFeedback"
*.ship.cellularNic.nrPhy.logUpdatePeriod = 0.1s
# to add 5G PHY data to use in DRL state (functional part is not implemented yet)
*.ship.app[0].isUsingPhyFeedback = true
