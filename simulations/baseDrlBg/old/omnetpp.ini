[General]
image-path=../../../images

allow-object-stealing-on-deletion = true

cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 60s
cmdenv-interactive = true
cmdenv-redirect-output = true
cmdenv-output-file = ${runnumber}-CMDENV_LOG.txt

**.sctp.**.scalar-recording = false
**.sctp.**.vector-recording = false
**.routingRecorder.enabled = false
record-eventlog = false

# change basic names of omnet++ output because of crashes due to very long filenames
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
eventlog-file = ${resultdir}/${configname}-${runnumber}.elog # despite being disabled it tries to delete it on start...
snapshot-file = ${resultdir}/${configname}-${runnumber}.sna

# change this through a command line to run N episodes with N different seeds, otherwise the same simulation is reproduced over and over
repeat = 1000

simtime-resolution = ps
sim-time-limit=600s # 10 minutes

network = gymir5g.simulations.baseDrlBg.DrlBaseNetworkBg

# default playground
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinX = 50m
**.mobility.constraintAreaMinY = 50m
**.mobility.constraintAreaMinZ = 0m
**.mobility.initFromDisplayString = false

# network config
*.configurator.config = xmldoc("demo.xml")

# visualization
*.visualizer.mobilityVisualizer.displayMobility = true
*.visualizer.mobilityVisualizer.displayPositions = true
*.visualizer.mobilityVisualizer.displayOrientations = true
*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true
*.visualizer.mobilityVisualizer.trailLength = 300
*.visualizer.mobilityVisualizer.moduleFilter = "**.ship*.mobility"

# channel configuration
**.dynamic_los = true

[Config BaseConfig]
extends = General

# transmission power
**.ueTxPower = 26
**.eNodeBTxPower = 46

# enable interference
**.downlink_interference = true
**.uplink_interference = true

# handover general settings
**.enableHandover = true
*.gNodeB*.cellularNic.phy.handoverLatency = 50ms
*.gNodeB*.cellInfo.broadcastMessageInterval = 1s # eNB will sends broadcast triggers every second
**.sctp.nagleEnabled = false  # if true transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

# carrier components: numBands = RBs number, numerology index: 0...5, etc.
# channel Bandwidth in MHz = (num bands/5) * 2^numerology index with 10% of the bandwidth reserved for guard bands
# one RB occupies 180KHz (with 4G and 5G with numerology index 0)
# FIRST: 2000 Mhz frequency band and deployed with 20 Mhz bandwidth
*.carrierAggregation.numComponentCarriers = 2
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 50
*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
# SECOND: 4000 Mhz frequency band and deployed with 100 Mhz bandwidth
*.carrierAggregation.componentCarrier[1].carrierFrequency = 4GHz
*.carrierAggregation.componentCarrier[1].numBands = 125
*.carrierAggregation.componentCarrier[1].numerologyIndex = 2

*.eNodeB*.cellularNic.numCarriers = 1
*.eNodeB*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.gNodeB*.cellularNic.numCarriers = 1
*.gNodeB*.cellularNic.channelModel[0].componentCarrierIndex = 1

*.ship.cellularNic.numCarriers = 1
*.ship.cellularNic.numNRCarriers = 1
*.ship.cellularNic.channelModel[0].componentCarrierIndex = 0
*.ship.cellularNic.nrChannelModel[0].componentCarrierIndex = 1

######################################################################################################
# ships-to-gnb connection                                                                            #
######################################################################################################
# since dynamic association is turned on, they will be reassigned to the best-SINR gNBs at the initialization,
# but still they need to have first inner association, so they are assigned by default to the first LTE and NR indexes
**.dynamicCellAssociation = true

*.ship.macCellId = 1
*.ship.masterId = 1
*.ship.nrMacCellId = 3
*.ship.nrMasterId = 3
**.tolerateMaxDistViolation = true # prevent exception from being > 1000m away from gNB

######################################################################################################
# gNodeBs config                                                                                     #
######################################################################################################
*.eNodeB1.mobility.initialX  = 200m
*.eNodeB1.mobility.initialY = 300m

*.eNodeB2.mobility.initialX  = 700m
*.eNodeB2.mobility.initialY = 300m

*.gNodeB1.mobility.initialX  = 220m
*.gNodeB1.mobility.initialY = 320m

*.gNodeB2.mobility.initialX  = 720m
*.gNodeB2.mobility.initialY = 320m

# dual connectivity settings
**.dualConnectivityEnabled = true
*.eNodeB*.nicType = "LteNicEnbD2D"
*.eNodeB*.cellularNic.LtePdcpRrcType = "NRPdcpRrcEnb"
*.gNodeB1.masterId = 1
*.gNodeB2.masterId = 2

# X2 settings
*.eNodeB*.numX2Apps = 2
*.gNodeB*.numX2Apps = 1

*.gNodeB1.x2App[0].client.connectAddress = "eNodeB1%x2ppp0"
*.gNodeB2.x2App[0].client.connectAddress = "eNodeB2%x2ppp0"

*.eNodeB1.x2App[0].client.connectAddress = "gNodeB1%x2ppp0"
*.eNodeB1.x2App[1].client.connectAddress = "eNodeB2%x2ppp1"

*.eNodeB2.x2App[0].client.connectAddress = "gNodeB2%x2ppp0"
*.eNodeB2.x2App[1].client.connectAddress = "eNodeB1%x2ppp1"

*.*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

######################################################################################################
# target ship (UE) mobility config                                                                   #
######################################################################################################

*.ship.mobility.typename = "RandomWaypointMobility"
*.ship.mobility.initFromDisplayString = false
*.ship.mobility.constraintAreaMaxX = 750m
*.ship.mobility.constraintAreaMaxY = 750m
*.ship.mobility.constraintAreaMinX = 50m
*.ship.mobility.constraintAreaMinY = 50m
*.ship.mobility.initialX = uniform(550m,750m)# generate in the right part
*.ship.mobility.initialY = uniform(350m,550m)
*.ship.mobility.waitTime = 0.5s
*.ship.mobility.speed = uniform(2mps, 15mps)

######################################################################################################
# BG cells                                                                                           #
######################################################################################################
# add 3 BgCells in a symmetric way
*.numBgCells = 3
**.numBgUes = intuniform(30, 50)

*.bgCell[*].bgScheduler.isNr = true
*.bgCell[*].bgScheduler.txPower = 46

# position of the background gNodeBs
*.bgCell[0].mobility.initialX = 450m 
*.bgCell[0].mobility.initialY = 400m
*.bgCell[1].mobility.initialX = 100m 
*.bgCell[1].mobility.initialY = 500m
*.bgCell[2].mobility.initialX = 800m 
*.bgCell[2].mobility.initialY = 100m
 
# mobility of background UEs
*.bgCell[*].bgTrafficGenerator.bgUE[*].mobility.typename = "RandomWaypointMobility"
*.bgCell[*].bgTrafficGenerator.bgUE[*].mobility.speed = uniform(2mps, 7mps)

*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(350m,550m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(300m,500m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(50m,200m) 
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(400m,600m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(600m,800m) 
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(50m,200m)

# background traffic in the background cells  
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeUl = uniform(0s,0.01s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = intuniform(250B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeUl = intuniform(100B,1000B)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = uniform(1ms,10ms)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodUl = uniform(1ms,20ms)

# background traffic in gNodeBs
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = intuniform(100B,500B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = intuniform(100B,1000B)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = uniform(20ms,50ms)
*.gNodeB*.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = uniform(20ms,100ms)

######################################################################################################
# Apps config                                                                                        #
######################################################################################################
# In the current version, the Ip2Nic module of the master eNB (the UE) selects which path
# to follow based on the Type of Service (TOS) field:
# - use master eNB if tos < 10
# - use secondary gNB if 10 <= tos < 20
# - use split bearer if tos >= 20
**.tos = 10

## target ship and shore apps
*.ship.numApps = 1
*.ship.app[0].typename = "gymir5g.apps.ship.ShipApp"
*.ship.app[0].localPortData = 3088
*.ship.app[0].destAddress = "shore"
*.ship.app[0].destPort = 3000
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams.json"
*.ship.app[0].isUsingDRL = false

*.shore.numApps = 1
*.shore.app[0].typename = "gymir5g.apps.shore.ShoreApp"
*.shore.app[0].localPortData = 3000
*.shore.app[0].destAddress = "ship"
*.shore.app[0].destPort = 3088
*.shore.app[0].verbose = 2