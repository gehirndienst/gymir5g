[General]
image-path = ../../images

allow-object-stealing-on-deletion = true

cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 60s
cmdenv-interactive = true
cmdenv-redirect-output = true
cmdenv-output-file = ${runnumber}-CMDENV_LOG.txt

**.vector-recording = false
**.sctp.**.scalar-recording = false
**.sctp.**.vector-recording = false
**.routingRecorder.enabled = false
record-eventlog = false

# change basic names of omnet++ output because of crashes due to very long filenames
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
eventlog-file = ${resultdir}/${configname}-${runnumber}.elog # despite being disabled it tries to delete it on start...
snapshot-file = ${resultdir}/${configname}-${runnumber}.sna

# create N different seeds i.e., scenarios
repeat = 1000

# time limit for one simulation run
sim-time-limit = 1000s

[Config SABase]
extends = General
network = Anleger_SA

**.mobility.constraintAreaMaxX = 5000m
**.mobility.constraintAreaMaxY = 3000m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinX = 1000m
**.mobility.constraintAreaMinY = 500m
**.mobility.constraintAreaMinZ = 0m
**.mobility.initFromDisplayString = false

######################################################################################################
# MAIN COMMINUCATION / CHANNEL PARAMETERS                                                            #
######################################################################################################

# channel configuration
**.scenario = "URBAN_MACROCELL"
**.amcType = "NRAmc"
**.targetBler = 0.01
**.blerShift = 5
**.fbPeriod = 40
**.pilotMode = "ROBUST_CQI" 
**.mac.schedulingDisciplineDl = "PF"
**.mac.schedulingDisciplineUl = "PF"
**.dynamic_los = true
# to prevent error when distance from ue to gnb is > 5000m
**.tolerateMaxDistViolation = true

# transmission power
**.ueTxPower = 26
**.eNodeBTxPower = 46

# enable interference
**.downlink_interference = true
**.uplink_interference = true
**.bgCell_interference = true

# handover general settings
**.enableHandover = true
*.eNB*.cellularNic.phy.handoverLatency = 50ms
*.eNB*.cellInfo.broadcastMessageInterval = 1s
**.sctp.nagleEnabled = false
**.sctp.enableHeartbeats = false
*.*.x2App[*].server.localPort = 5000 + ancestorIndex(1)

#####################################################################################################################################
##### carrier components: numBands = RBs number, numerology index: 0...5, etc.                                                  #####
##### spectrum/channel Bandwidth in MHz = (num bands/5) * 2^numerology index with 10% of the bandwidth reserved for guard bands #####
##### one RB occupies 180KHz (with 4G and 5G with numerology index 0)                                                           #####
##### NOTE: Channel and spectrum bandwidth is the same in simu5g, since no channel spacing is implemented                       #####
#####################################################################################################################################

# list all bands that are used by eNBs
*.carrierAggregation.numComponentCarriers = 3

# n3: 1.8 GHz
*.carrierAggregation.componentCarrier[0].carrierFrequency = 1.8GHz
*.carrierAggregation.componentCarrier[0].numBands = 100

# n28: 0.7 GHz
*.carrierAggregation.componentCarrier[1].carrierFrequency = 0.7GHz
*.carrierAggregation.componentCarrier[1].numBands = 100

# n78: 3.5 GHz
*.carrierAggregation.componentCarrier[2].carrierFrequency = 3.5GHz
*.carrierAggregation.componentCarrier[2].numBands = 100
*.carrierAggregation.componentCarrier[2].numerologyIndex = 1
*.carrierAggregation.componentCarrier[2].useTdd = true

*.ship.cellularNic.numNRCarriers = 3
*.ship.cellularNic.nrChannelModel[0].componentCarrierIndex = 2
*.ship.cellularNic.nrChannelModel[1].componentCarrierIndex = 1
*.ship.cellularNic.nrChannelModel[2].componentCarrierIndex = 0

######################################################################################################
# ship-to-gnb connection in dual connectivity                                                        #
######################################################################################################
# since dynamic association is turned on, they will be reassigned to the best-SINR gNBs at the initialization,
# but still they need to have first inner association, so they are assigned by default to the first LTE and NR indexes
**.dynamicCellAssociation = true

# cell ids (ignored by dynamicCellAssosication)
*.ship.macCellId = 0
*.ship.masterId = 0
*.ship.nrMacCellId = 1
*.ship.nrMasterId = 1

######################################################################################################
# Base stations coordinates                                                                          #
######################################################################################################
# coordinates are also given in @display tag
*.eNB23201.mobility.initialX = ${eNB23201initX=2900.73951838478m}
*.eNB23201.mobility.initialY = ${eNB23201initY=2631.1304712972415m}

*.eNB21430.mobility.initialX = ${eNB21430initX=4312.803389692777m}
*.eNB21430.mobility.initialY = ${eNB21430initY=2126.4607051989806m}

*.eNB23654.mobility.initialX = ${eNB23654initX=4645.8561648811265m}
*.eNB23654.mobility.initialY = ${eNB23654initY=1000.2911173884568m}

*.eNB26135.mobility.initialX = ${eNB26135initX=1930.6380343701271m}
*.eNB26135.mobility.initialY = ${eNB26135initY=1328.4680338443068m}

*.eNB24141.mobility.initialX = ${eNB24141initX=1636.2871083448222m}
*.eNB24141.mobility.initialY = ${eNB24141initY=1354.8879758731273m}

*.eNB24143.mobility.initialX = ${eNB24143initX=1492.3913746562134m}
*.eNB24143.mobility.initialY = ${eNB24143initY=1837.3371646755186m}

######################################################################################################
# Base stations carrier frequencies (bands)                                                          #
######################################################################################################
# gnbs are using n3, n28 and n78
# NOTE: assumption is that if the corresponding enb has this cf then we assign it to gnb as well..
# NOTE: we assume n78 have all of them
*.eNB23201.cellularNic.numCarriers = 3
*.eNB23201.cellularNic.channelModel[0].componentCarrierIndex = 0
*.eNB23201.cellularNic.channelModel[1].componentCarrierIndex = 1
*.eNB23201.cellularNic.channelModel[2].componentCarrierIndex = 2

*.eNB21430.cellularNic.numCarriers = 3
*.eNB21430.cellularNic.channelModel[0].componentCarrierIndex = 0
*.eNB21430.cellularNic.channelModel[1].componentCarrierIndex = 1
*.eNB21430.cellularNic.channelModel[2].componentCarrierIndex = 2

*.eNB23654.cellularNic.numCarriers = 2
*.eNB23654.cellularNic.channelModel[0].componentCarrierIndex = 1
*.eNB23654.cellularNic.channelModel[1].componentCarrierIndex = 2

*.eNB26135.cellularNic.numCarriers = 2
*.eNB26135.cellularNic.channelModel[0].componentCarrierIndex = 0
*.eNB26135.cellularNic.channelModel[1].componentCarrierIndex = 2

*.eNB24141.cellularNic.numCarriers = 1
*.eNB24141.cellularNic.channelModel[0].componentCarrierIndex = 2

*.eNB24143.cellularNic.numCarriers = 1
*.eNB24143.cellularNic.channelModel[0].componentCarrierIndex = 2

######################################################################################################
# X2 connection addresses                                                                            #
######################################################################################################
*.eNB23201.numX2Apps = 5
*.eNB23201.x2App[0].client.connectAddress = "eNB21430%x2ppp0"
*.eNB23201.x2App[1].client.connectAddress = "eNB23654%x2ppp0"
*.eNB23201.x2App[2].client.connectAddress = "eNB26135%x2ppp0"
*.eNB23201.x2App[3].client.connectAddress = "eNB24141%x2ppp0"
*.eNB23201.x2App[4].client.connectAddress = "eNB24143%x2ppp0"
*.eNB21430.numX2Apps = 5
*.eNB21430.x2App[0].client.connectAddress = "eNB23201%x2ppp0"
*.eNB21430.x2App[1].client.connectAddress = "eNB23654%x2ppp1"
*.eNB21430.x2App[2].client.connectAddress = "eNB26135%x2ppp1"
*.eNB21430.x2App[3].client.connectAddress = "eNB24141%x2ppp1"
*.eNB21430.x2App[4].client.connectAddress = "eNB24143%x2ppp1"
*.eNB23654.numX2Apps = 5
*.eNB23654.x2App[0].client.connectAddress = "eNB23201%x2ppp1"
*.eNB23654.x2App[1].client.connectAddress = "eNB21430%x2ppp1"
*.eNB23654.x2App[2].client.connectAddress = "eNB26135%x2ppp2"
*.eNB23654.x2App[3].client.connectAddress = "eNB24141%x2ppp2"
*.eNB23654.x2App[4].client.connectAddress = "eNB24143%x2ppp2"
*.eNB26135.numX2Apps = 5
*.eNB26135.x2App[0].client.connectAddress = "eNB23201%x2ppp2"
*.eNB26135.x2App[1].client.connectAddress = "eNB21430%x2ppp2"
*.eNB26135.x2App[2].client.connectAddress = "eNB23654%x2ppp2"
*.eNB26135.x2App[3].client.connectAddress = "eNB24141%x2ppp3"
*.eNB26135.x2App[4].client.connectAddress = "eNB24143%x2ppp3"
*.eNB24141.numX2Apps = 5
*.eNB24141.x2App[0].client.connectAddress = "eNB23201%x2ppp3"
*.eNB24141.x2App[1].client.connectAddress = "eNB21430%x2ppp3"
*.eNB24141.x2App[2].client.connectAddress = "eNB23654%x2ppp3"
*.eNB24141.x2App[3].client.connectAddress = "eNB26135%x2ppp3"
*.eNB24141.x2App[4].client.connectAddress = "eNB24143%x2ppp4"
*.eNB24143.numX2Apps = 5
*.eNB24143.x2App[0].client.connectAddress = "eNB23201%x2ppp4"
*.eNB24143.x2App[1].client.connectAddress = "eNB21430%x2ppp4"
*.eNB24143.x2App[2].client.connectAddress = "eNB23654%x2ppp4"
*.eNB24143.x2App[3].client.connectAddress = "eNB26135%x2ppp4"
*.eNB24143.x2App[4].client.connectAddress = "eNB24141%x2ppp4"

######################################################################################################
# Visualization.                                                                                     #
######################################################################################################
*.visualizer.obstacleLossVisualizer.displayIntersections = true
*.visualizer.obstacleLossVisualizer.displayFaceNormalVectors = true
*.visualizer.obstacleLossVisualizer.intersectionLineColor = "yellow"
*.visualizer.mediumVisualizer.signalPropagationAnimationSpeed = 500/3e8
*.visualizer.mediumVisualizer.signalTransmissionAnimationSpeed = 50000/3e8
*.visualizer.mediumVisualizer.displaySignals = true
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.mobilityVisualizer.displayPositions = true
*.visualizer.mobilityVisualizer.displayOrientations = true
*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true
*.visualizer.mobilityVisualizer.moduleFilter = "**.**ship.mobility"

[Config SABgTraffic]
extends = SABase
######################################################################################################
# Background UEs locations                                                                           #
######################################################################################################
# bg UEs positions in the radius, the number of bgUEs is regulated in the child scenarios
# NOTE: we assume that 99% of BgUes are land-based consumers so that we populate the areas which are on the land according to cells from cellmapper.net
**.bgUE[*].mobility.typename = "LinearMobility"

*.eNB23201.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialX = uniform(${eNB23201initX}-10m,${eNB23201initX}+1000m)
*.eNB23201.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialY = uniform(${eNB23201initY}-10m,${eNB23201initY}+300m)

*.eNB21430.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialX = uniform(${eNB21430initX}-1000m,${eNB21430initX}+500m)
*.eNB21430.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialY = uniform(${eNB21430initY}-1000m,${eNB21430initY}+800m)

*.eNB23654.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialX = uniform(${eNB23654initX}-1000m,${eNB23654initX}+200m)
*.eNB23654.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialY = uniform(${eNB23654initY}-1m,${eNB23654initY}+700m)

*.eNB26135.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialX = uniform(${eNB26135initX}-700m,${eNB26135initX}+50m)
*.eNB26135.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialY = uniform(${eNB26135initY}-300m,${eNB26135initY}+50m)

*.eNB24141.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialX = uniform(${eNB24141initX}-600m,${eNB24141initX}+50m)
*.eNB24141.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialY = uniform(${eNB24141initY}-500m,${eNB24141initY}+50m)

*.eNB24143.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialX = uniform(${eNB24143initX}-400m,${eNB24143initX}+100m)
*.eNB24143.cellularNic.bgTrafficGenerator[*].bgUE[*].mobility.initialY = uniform(${eNB24143initY}-700m,${eNB24143initY}+200m)

######################################################################################################
# Background UEs Traffic                                                                             #
######################################################################################################
# traffic: set so far the same but random traffic for all carriers
**.dlBgTrafficRatio = ${dlBgTrafficRatio= uniform(0.5, 0.9)}

*.*NB*.cellularNic.bgTrafficGenerator[*].enablePeriodicCqiUpdate = true
*.*NB*.cellularNic.bgTrafficGenerator[*].useProbabilisticCqi = ${probCqi=false}
*.*NB*.cellularNic.bgTrafficGenerator[*].bgUE[*].trafficGeneratorType = "TrafficGeneratorBase"
*.*NB*.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.startTimeDl = uniform(0.01s,1s)
*.*NB*.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.startTimeUl = uniform(0.01s,1s)

#eNB23201, numCarriers = 3
*.eNB23201.cellularNic.bgTrafficGenerator[*].numBgUes = ${eNB23201numBgUes=intuniform(10, 20)}
*.eNB23201.cellularNic.bgTrafficGenerator[*].bgUE[0..floor(dlBgTrafficRatio * eNB23201numBgUes)].generator.packetSizeDl = intuniform(300B,1400B)
*.eNB23201.cellularNic.bgTrafficGenerator[*].bgUE[floor(dlBgTrafficRatio * eNB23201numBgUes)..eNB23201numBgUes].generator.packetSizeUl = intuniform(100B,1000B)
*.eNB23201.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodDl = uniform(10ms, 20ms)
*.eNB23201.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodUl = uniform(20ms, 30ms)

#eNB21430, numCarriers = 3
*.eNB21430.cellularNic.bgTrafficGenerator[*].numBgUes = ${eNB21430numBgUes=intuniform(10, 20)}
*.eNB21430.cellularNic.bgTrafficGenerator[*].bgUE[0..floor(dlBgTrafficRatio * eNB21430numBgUes)].generator.packetSizeDl = intuniform(300B,1400B)
*.eNB21430.cellularNic.bgTrafficGenerator[*].bgUE[floor(dlBgTrafficRatio * eNB21430numBgUes)..eNB21430numBgUes].generator.packetSizeUl = intuniform(100B,1000B)
*.eNB21430.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodDl = uniform(10ms, 20ms)
*.eNB21430.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodUl = uniform(20ms, 30ms)

#eNB23654, numCarriers = 3
*.eNB23654.cellularNic.bgTrafficGenerator[*].numBgUes = ${eNB23654numBgUes=intuniform(10, 20)}
*.eNB23654.cellularNic.bgTrafficGenerator[*].bgUE[0..floor(dlBgTrafficRatio * eNB23654numBgUes)].generator.packetSizeDl = intuniform(300B,1400B)
*.eNB23654.cellularNic.bgTrafficGenerator[*].bgUE[floor(dlBgTrafficRatio * eNB23654numBgUes)..eNB23654numBgUes].generator.packetSizeUl = intuniform(100B,1000B)
*.eNB23654.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodDl = uniform(10ms, 20ms)
*.eNB23654.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodUl = uniform(20ms, 30ms)

#eNB26135, numCarriers = 2
*.eNB26135.cellularNic.bgTrafficGenerator[*].numBgUes = ${eNB26135numBgUes=intuniform(10, 20)}
*.eNB26135.cellularNic.bgTrafficGenerator[*].bgUE[0..floor(dlBgTrafficRatio * eNB26135numBgUes)].generator.packetSizeDl = intuniform(300B,1400B)
*.eNB26135.cellularNic.bgTrafficGenerator[*].bgUE[floor(dlBgTrafficRatio * eNB26135numBgUes)..eNB26135numBgUes].generator.packetSizeUl = intuniform(100B,1000B)
*.eNB26135.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodDl = uniform(10ms, 20ms)
*.eNB26135.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodUl = uniform(20ms, 30ms)

#eNB24141, numCarriers = 1
*.eNB24141.cellularNic.bgTrafficGenerator[*].numBgUes = ${eNB24141numBgUes=intuniform(10, 20)}
*.eNB24141.cellularNic.bgTrafficGenerator[*].bgUE[0..floor(dlBgTrafficRatio * eNB24141numBgUes)].generator.packetSizeDl = intuniform(300B,1400B)
*.eNB24141.cellularNic.bgTrafficGenerator[*].bgUE[floor(dlBgTrafficRatio * eNB24141numBgUes)..eNB24141numBgUes].generator.packetSizeUl = intuniform(100B,1000B)
*.eNB24141.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodDl = uniform(10ms, 20ms)
*.eNB24141.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodUl = uniform(20ms, 30ms)

#eNB24143, numCarriers = 1
*.eNB24143.cellularNic.bgTrafficGenerator[*].numBgUes = ${eNB24143numBgUes=intuniform(10, 20)}
*.eNB24143.cellularNic.bgTrafficGenerator[*].bgUE[0..floor(dlBgTrafficRatio * eNB24143numBgUes)].generator.packetSizeDl = intuniform(300B,1400B)
*.eNB24143.cellularNic.bgTrafficGenerator[*].bgUE[floor(dlBgTrafficRatio * eNB24143numBgUes)..eNB24143numBgUes].generator.packetSizeUl = intuniform(100B,1000B)
*.eNB24143.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodDl = uniform(10ms, 20ms)
*.eNB24143.cellularNic.bgTrafficGenerator[*].bgUE[*].generator.periodUl = uniform(20ms, 30ms)


[Config SAAppsSetup]
extends = SABase
######################################################################################################
# Apps config                                                                                        #
######################################################################################################
# In the current version, the Ip2Nic module of the master eNB (the UE) selects which path
# to follow based on the Type of Service (TOS) field:
# - use master eNB if tos < 10
# - use secondary gNB if 10 <= tos < 20
# - use split bearer if tos >= 20
**.tos = 10

# target ship and shore apps
*.ship.numApps = 1
*.ship.app[0].typename = "gymir5g.apps.ship.ShipApp"
*.ship.app[0].localPortData = 3088
*.ship.app[0].destAddress = "shore"
*.ship.app[0].destPort = 3000
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc_same.json"
*.ship.app[0].adaptiveAlgorithm = "no"
*.ship.app[0].isFec = false
*.ship.app[0].isSendingSimultaneously = true
*.ship.app[0].isUsingFutureData = true
*.ship.app[0].isVeinsMobility = false
*.ship.app[0].isMultiHome = false
*.ship.app[0].logdir = "."

*.shore.numApps = 1
*.shore.app[0].typename = "gymir5g.apps.shore.ShoreApp"
*.shore.app[0].localPortData = 3000
*.shore.app[0].destAddress = "ship"
*.shore.app[0].destPort = 3088
*.shore.app[0].isDecode = true
*.shore.app[0].warmUp = 0.01s
*.shore.app[0].isFec = false
*.shore.app[0].isNack = true
*.shore.app[0].maxNackDelay = 0.1s
*.shore.app[0].maxPlayoutDelay = 0.25s
*.shore.app[0].receiverReportPeriod = 1s
*.shore.app[0].transportFeedbackPeriod = 0.2s
*.shore.app[0].isDirectReceiverReport = true
*.shore.app[0].isDirectTransportFeedbssack = true
*.shore.app[0].verbose = 0

### target agent's mobility
*.ship.mobility.typename = "gymir5g.omnet.mobility.docking.DockingMobility"
*.ship.mobility.waypointsFile = "waypoints_rev_omnetpp.json"

[Config SANoTraffic]
extends = SAAppsSetup
**.vector-recording = true
*.ship.app[0].streamsConfigurationSchema = "../../configurations/baseDrl/streams_sim_webrtc_same_v.json"
*.shore.app[0].verbose = 2

[Config SA]
extends = SABgTraffic, SAAppsSetup

