//
// Generated file, do not edit! Created by opp_msgtool 6.0 from apps/shore/messages/AckPacket.msg.
//

#ifndef __ACKPACKET_M_H
#define __ACKPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class AckPacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>apps/shore/messages/AckPacket.msg:8</tt> by opp_msgtool.
 * <pre>
 * class AckPacket extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(1);
 * 
 *     int sequenceNumber;
 * 
 *     // for simplicity
 *     string streamName;
 *     int payloadSize;
 *     simtime_t senderTimestamp;
 *     simtime_t arrivalTimestamp;
 * }
 * </pre>
 */
class AckPacket : public ::inet::FieldsChunk
{
  protected:
    int sequenceNumber = 0;
    omnetpp::opp_string streamName;
    int payloadSize = 0;
    omnetpp::simtime_t senderTimestamp = SIMTIME_ZERO;
    omnetpp::simtime_t arrivalTimestamp = SIMTIME_ZERO;

  private:
    void copy(const AckPacket& other);

  protected:
    bool operator==(const AckPacket&) = delete;

  public:
    AckPacket();
    AckPacket(const AckPacket& other);
    virtual ~AckPacket();
    AckPacket& operator=(const AckPacket& other);
    virtual AckPacket *dup() const override {return new AckPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual const char * getStreamName() const;
    virtual void setStreamName(const char * streamName);

    virtual int getPayloadSize() const;
    virtual void setPayloadSize(int payloadSize);

    virtual omnetpp::simtime_t getSenderTimestamp() const;
    virtual void setSenderTimestamp(omnetpp::simtime_t senderTimestamp);

    virtual omnetpp::simtime_t getArrivalTimestamp() const;
    virtual void setArrivalTimestamp(omnetpp::simtime_t arrivalTimestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline AckPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<AckPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ACKPACKET_M_H

