//
// Generated file, do not edit! Created by opp_msgtool 6.0 from apps/shore/messages/ReceiverReportPacket.msg.
//

#ifndef __RECEIVERREPORTPACKET_M_H
#define __RECEIVERREPORTPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ReceiverReportPacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "ReportBlock_m.h" // import ReportBlock

/**
 * Class generated from <tt>apps/shore/messages/ReceiverReportPacket.msg:10</tt> by opp_msgtool.
 * <pre>
 * class ReceiverReportPacket extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(4); // PT 201 RTCP header
 * 
 *     int feedbackCount;
 *     cArray reportBlocks;
 * }
 * </pre>
 */
class ReceiverReportPacket : public ::inet::FieldsChunk
{
  protected:
    int feedbackCount = 0;
    omnetpp::cArray reportBlocks;

  private:
    void copy(const ReceiverReportPacket& other);

  protected:
    bool operator==(const ReceiverReportPacket&) = delete;

  public:
    ReceiverReportPacket();
    ReceiverReportPacket(const ReceiverReportPacket& other);
    virtual ~ReceiverReportPacket();
    ReceiverReportPacket& operator=(const ReceiverReportPacket& other);
    virtual ReceiverReportPacket *dup() const override {return new ReceiverReportPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getFeedbackCount() const;
    virtual void setFeedbackCount(int feedbackCount);

    virtual const omnetpp::cArray& getReportBlocks() const;
    virtual omnetpp::cArray& getReportBlocksForUpdate() { handleChange();return const_cast<omnetpp::cArray&>(const_cast<ReceiverReportPacket*>(this)->getReportBlocks());}
    virtual void setReportBlocks(const omnetpp::cArray& reportBlocks);


  public:
    /** adds a report block to this receiver report */
    virtual void addReportBlock(ReportBlock* reportBlock);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReceiverReportPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReceiverReportPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ReceiverReportPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<ReceiverReportPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RECEIVERREPORTPACKET_M_H

