//
// Generated file, do not edit! Created by opp_msgtool 6.0 from apps/ship/messages/ShipPacket.msg.
//

#ifndef __SHIPPACKET_M_H
#define __SHIPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ShipPacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>apps/ship/messages/ShipPacket.msg:9</tt> by opp_msgtool.
 * <pre>
 * class ShipPacket extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(14); // fixed according to RFC
 * 
 *     int transportWideSequenceNumber; // global id for transport feedback
 *     int sequenceNumber; // stream packet id
 * 
 *     string streamName;
 *     string streamType; // "video", "lidar", "blob", "sim"
 * 
 *     int elemNumber; // sequence number of a stream element, e.g., a video frame
 *     int fragmentOffset; // fragment of a current stream element, e.g., a NAL of the x264 encoder
 *     bool isLastFragment; // extra decoding info
 * 
 *     int payloadSize; // in bytes
 *     simtime_t payloadTimestamp; // squash RTP and NTP timestamps
 * 
 *     // RTC info
 *     bool isMarked; // if SACK is requested for this packet, mirrors "marker" in RTP packet
 * 
 *     // network type
 *     int networkType;
 * }
 * </pre>
 */
class ShipPacket : public ::inet::FieldsChunk
{
  protected:
    int transportWideSequenceNumber = 0;
    int sequenceNumber = 0;
    omnetpp::opp_string streamName;
    omnetpp::opp_string streamType;
    int elemNumber = 0;
    int fragmentOffset = 0;
    bool isLastFragment_ = false;
    int payloadSize = 0;
    omnetpp::simtime_t payloadTimestamp = SIMTIME_ZERO;
    bool isMarked_ = false;
    int networkType = 0;

  private:
    void copy(const ShipPacket& other);

  protected:
    bool operator==(const ShipPacket&) = delete;

  public:
    ShipPacket();
    ShipPacket(const ShipPacket& other);
    virtual ~ShipPacket();
    ShipPacket& operator=(const ShipPacket& other);
    virtual ShipPacket *dup() const override {return new ShipPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTransportWideSequenceNumber() const;
    virtual void setTransportWideSequenceNumber(int transportWideSequenceNumber);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual const char * getStreamName() const;
    virtual void setStreamName(const char * streamName);

    virtual const char * getStreamType() const;
    virtual void setStreamType(const char * streamType);

    virtual int getElemNumber() const;
    virtual void setElemNumber(int elemNumber);

    virtual int getFragmentOffset() const;
    virtual void setFragmentOffset(int fragmentOffset);

    virtual bool isLastFragment() const;
    virtual void setIsLastFragment(bool isLastFragment);

    virtual int getPayloadSize() const;
    virtual void setPayloadSize(int payloadSize);

    virtual omnetpp::simtime_t getPayloadTimestamp() const;
    virtual void setPayloadTimestamp(omnetpp::simtime_t payloadTimestamp);

    virtual bool isMarked() const;
    virtual void setIsMarked(bool isMarked);

    virtual int getNetworkType() const;
    virtual void setNetworkType(int networkType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ShipPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ShipPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ShipPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<ShipPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SHIPPACKET_M_H

