//
// Generated file, do not edit! Created by opp_msgtool 6.0 from apps/ship/messages/NackDecision.msg.
//

#ifndef __NACKDECISION_M_H
#define __NACKDECISION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class NackDecision;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>apps/ship/messages/NackDecision.msg:10</tt> by opp_msgtool.
 * <pre>
 * class NackDecision extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(2);
 * 
 *     bool decision;
 *     string reason;
 *     simtime_t timestamp;
 * 
 *     // auxilary when it is sent alone
 *     string streamName;
 *     int sequenceNumber;
 * 
 *     // auxilary for multihome scenarios
 *     int networkType;
 * }
 * </pre>
 */
class NackDecision : public ::inet::FieldsChunk
{
  protected:
    bool decision = false;
    omnetpp::opp_string reason;
    omnetpp::simtime_t timestamp = SIMTIME_ZERO;
    omnetpp::opp_string streamName;
    int sequenceNumber = 0;
    int networkType = 0;

  private:
    void copy(const NackDecision& other);

  protected:
    bool operator==(const NackDecision&) = delete;

  public:
    NackDecision();
    NackDecision(const NackDecision& other);
    virtual ~NackDecision();
    NackDecision& operator=(const NackDecision& other);
    virtual NackDecision *dup() const override {return new NackDecision(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getDecision() const;
    virtual void setDecision(bool decision);

    virtual const char * getReason() const;
    virtual void setReason(const char * reason);

    virtual omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(omnetpp::simtime_t timestamp);

    virtual const char * getStreamName() const;
    virtual void setStreamName(const char * streamName);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual int getNetworkType() const;
    virtual void setNetworkType(int networkType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NackDecision& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NackDecision& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline NackDecision *fromAnyPtr(any_ptr ptr) { return check_and_cast<NackDecision*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __NACKDECISION_M_H

