//
// Generated file, do not edit! Created by opp_msgtool 6.0 from omnet/apps/multihome/MultiHomePacket.msg.
//

#ifndef __MULTIHOMEPACKET_M_H
#define __MULTIHOMEPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MultiHomePacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>omnet/apps/multihome/MultiHomePacket.msg:4</tt> by opp_msgtool.
 * <pre>
 * class MultiHomePacket extends inet::FieldsChunk
 * {
 *     int id;
 *     int networkType;
 *     string destAddress;
 *     int destPort;
 *     int payloadSize;
 *     simtime_t sendingTime;
 * }
 * </pre>
 */
class MultiHomePacket : public ::inet::FieldsChunk
{
  protected:
    int id = 0;
    int networkType = 0;
    omnetpp::opp_string destAddress;
    int destPort = 0;
    int payloadSize = 0;
    omnetpp::simtime_t sendingTime = SIMTIME_ZERO;

  private:
    void copy(const MultiHomePacket& other);

  protected:
    bool operator==(const MultiHomePacket&) = delete;

  public:
    MultiHomePacket();
    MultiHomePacket(const MultiHomePacket& other);
    virtual ~MultiHomePacket();
    MultiHomePacket& operator=(const MultiHomePacket& other);
    virtual MultiHomePacket *dup() const override {return new MultiHomePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getId() const;
    virtual void setId(int id);

    virtual int getNetworkType() const;
    virtual void setNetworkType(int networkType);

    virtual const char * getDestAddress() const;
    virtual void setDestAddress(const char * destAddress);

    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);

    virtual int getPayloadSize() const;
    virtual void setPayloadSize(int payloadSize);

    virtual omnetpp::simtime_t getSendingTime() const;
    virtual void setSendingTime(omnetpp::simtime_t sendingTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MultiHomePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MultiHomePacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MultiHomePacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<MultiHomePacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MULTIHOMEPACKET_M_H

